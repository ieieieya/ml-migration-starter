plugins {
	id "java"
	id "com.marklogic.ml-gradle" version "3.8.2"
}

repositories {
	jcenter()
	mavenCentral()
	maven { url "http://developer.marklogic.com/maven2" }
}

dependencies {
	// Core dependencies needed for using Spring Batch, Spring JDBC, and marklogic-spring-batch
	compile "com.marklogic:marklogic-spring-batch-core:1.4.2"
	compile "com.marklogic:spring-batch-rdbms:1.4.2"
	compile "org.springframework.data:spring-data-jpa:2.0.9.RELEASE"
	compile "org.hibernate:hibernate-core:5.3.3.Final"

	runtime "mysql:mysql-connector-java:8.0.11"

	// Forcing Spring to use logback instead of commons-logging
	runtime "ch.qos.logback:logback-classic:1.1.8"
	runtime group: "org.slf4j", name: "jcl-over-slf4j", version: "1.7.22"
	runtime group: "org.slf4j", name: "slf4j-api", version: "1.7.22"

	// Using H2 as a sample database; can pull its JDBC driver from a Maven repository
	testRuntime "com.h2database:h2:1.4.193"

	// For running ml-unit-test tests via JUnit
	testCompile "com.marklogic:ml-junit:3.0.0"
	testCompile "org.springframework:spring-test:5.0.8.RELEASE"
	testCompile "org.springframework.batch:spring-batch-test:3.0.8.RELEASE"

	// Can reference a local JDBC driver like this (Oracle, along with others, do not publish their JDBC driver to a public repo)
	// runtime files("./path/to/ojdbc-6.jar")
}

task migrate(type: JavaExec) {
	description = "Run the migration program"
	classpath = sourceSets.test.runtimeClasspath
	main = "org.example.Main"
	args = [
		"--host", mlHost,
		"--port", mlRestPort,
		"--username", mlUsername,
		"--password", mlPassword,
		"--jdbc_url", jdbc_url,
		"--jdbc_driver", jdbc_driver,
		"--jdbc_username", jdbc_username,
		"--jdbc_password", jdbc_password,
		"--all_tables", all_tables,
		"--chunk_size", chunk_size,
		"--collections", collections,
		"--document_type", document_type,
		"--output_uri_prefix", output_uri_prefix,
		"--permissions", permissions,
		"--root_local_name", root_local_name,
		"--sql", sql,
		"--thread_count", thread_count,
		"--uri_id", uri_id
	]
}

task help(type: JavaExec) {
	description = "See a list of all supported command line arguments"
	classpath = sourceSets.main.runtimeClasspath
	main = "org.example.Main"
	args = ["--help"]
}

task loadH2Data(type: JavaExec) {
	classpath = configurations.testRuntime
	main = "org.h2.tools.RunScript"
	args = [
		"-url", "jdbc:h2:file:./data/h2/sample",
		"-user", "sa",
		"-script", "./data/h2setup.sql"
	]
}
migrate.dependsOn loadH2Data
