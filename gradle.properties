# RDBMS connection properties
#jdbc_driver=org.h2.Driver
#jdbc_url=jdbc:h2:file:./data/h2/sample
#jdbc_username=sa
#jdbc_password=
jdbc_driver=com.mysql.cj.jdbc.Driver
jdbc_url=jdbc:mysql://localhost:3306/sakila?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
jdbc_username=root
jdbc_password=password

# MarkLogic connection properties
host=localhost
port=8000
username=admin
password=admin

# Whether or not to read all rows from all tables
all_tables=false

# Number of documents written to MarkLogic in one call
chunk_size=50

# Comma-delimited set of collections to write documents to
collections=raw

# Set to json to create JSON documents instead of XML; any other value will result in XML documents
document_type=xml

# Prefix of the URI for each document written to MarkLogic
output_uri_prefix=/data/

# Permissions to apply to documents - takes the form of role,capability,role,capability,etc
permissions=rest-reader,read,rest-writer,update

# Defines the local name of the root element in each document
# _tableName is a special value that indicates that the name of the table should be used
root_local_name=Invoice

# If all_tables is not set to true, then this query is used for selecting data to migrate
# If using this approach, be sure to set root_local_name to a meaningful value
#sql=SELECT * FROM CUSTOMER c LEFT JOIN INVOICE i on c.ID = i.CustomerID

# This doesn't work well because the column names aren't unique, and thus you can have conflicts, and you don't know
# what columns belong together as child objects
sql=SELECT inv.*, \
  it.ProductID as _item_ProductID, it.Quantity as _item_Quantity, it.Cost as _item_Cost, \
  s.Color as _stuff_Color, s.Size as _stuff_Size \
  FROM INVOICE inv \
  LEFT JOIN ITEM it ON inv.ID = it.InvoiceID \
  LEFT JOIN STUFF s ON inv.ID = s.InvoiceID \
  WHERE inv.ID = 33

# So we want to query Invoice and then grab data via 2 child queries
#sql=SELECT * FROM INVOICE

# Number of threads to use for writing documents to MarkLogic
thread_count=32

# Column in a row to look for; if it exists, will be used to generate part of the URI for a document
uri_id=
